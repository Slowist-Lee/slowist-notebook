import binascii

crc32_table = [
    0x00, 0x77, 0xEE, 0x99, 0xB9, 0x2E, 0xD5, 0x4C, 0x67, 0x11, 0xC8, 0xBE, 0x41, 0x34, 0x5D, 0x2A, 0x33, 0xCC, 0x56, 0x6F, 0x17, 0x72, 0x4B, 0x9A, 0xDB, 0x20, 0x3D, 0x5B, 0x44, 0x13, 0x6E, 0x82, 0x95, 0x7F, 0x10, 0x9B, 0x76, 0x05, 0x1A, 0x21, 0x3A, 0x26, 0x83, 0x9E, 0x1B, 0x5C, 0x65, 0x48, 0x23, 0x34, 0x51, 0x4A, 0x4B, 0x94, 0x8B, 0x90, 0x27, 0x7A, 0x6D, 0x52, 0x69, 0x8F, 0x80, 0x0B, 0x74, 0x1C, 0x4D, 0x5A, 0x53, 0x45, 0x0C, 0x8F, 0x1F, 0x13, 0x2C, 0x73, 0x30, 0x91, 0x6C, 0x76, 0x09, 0x1A, 0x2F, 0x64, 0x6D, 0x5E, 0x89, 0x38, 0x47, 0x40, 0x9B, 0x98, 0x35, 0x4E, 0xA9, 0x9D, 0x0A, 0x7B, 0x84, 0x61, 0x8E, 0x8F, 0x3B, 0x56, 0x6C, 0x6B, 0x65, 0x74, 0x19, 0x1A, 0x7D, 0x8C, 0x8D, 0x8C, 0x0D, 0x86, 0x0A, 0x09, 0x1E, 0x00, 0x7F, 0xC1, 0xB6, 0x8B, 0x1C, 0x7B, 0x57, 0x2C, 0x6B, 0x9F, 0x08, 0x14, 0x45, 0x3C, 0x2B, 0x70, 0xAD, 0x51, 0x94, 0x8B, 0x7A, 0x85, 0x62, 0x68, 0x3F, 0x52, 0x4C, 0x93, 0x6A, 0xB5, 0x69, 0x7E, 0x5D, 0x0C, 0x83, 0x55, 0x3E, 0x8C, 0x8B, 0x8A, 0x05, 0x0F, 0x83, 0x4C, 0x95, 0x9C, 0x7D, 0x22, 0x33, 0x36, 0x47, 0x46, 0x49, 0x03, 0x85, 0x4F, 0x94, 0x9B, 0x7C, 0x21, 0x26, 0x79, 0x2A, 0x37, 0x3C, 0x91, 0x3E, 0x8F, 0x62, 0x6D, 0x5F, 0x6A, 0x35, 0x5B, 0x58, 0x47, 0x42, 0x8A, 0x7B, 0x74, 0x2C, 0x53, 0x5D, 0x5C, 0x4D, 0x0E, 0x89, 0x0F, 0x12, 0x1B, 0x1A, 0x87, 0x76, 0x63, 0x3E, 0x8C, 0x91, 0x39, 0x90, 0x23, 0x36, 0x46, 0x4F, 0x4A, 0x05, 0x84, 0x0B, 0x90, 0x97, 0x24, 0x3A, 0x33, 0x26, 0x73, 0x74, 0x6C, 0x5B, 0x5A, 0x53, 0x44, 0x1B, 0x6C, 0x8D, 0x82, 0x83, 0x0C, 0x81, 0x0E, 0x08, 0x1F, 0x00, 0x77, 0xEE, 0x99, 0x8C, 0x1B, 0x7A, 0x5F, 0x2A, 0x65, 0x9A, 0x01, 0x0E, 0x41, 0x3A, 0x2F, 0x74, 0xA8, 0x50, 0x91, 0x8A, 0x7B, 0x84, 0x63, 0x6C, 0x3A, 0x59, 0x49, 0x90, 0x6B, 0xB0, 0x6C, 0x71, 0x5E, 0x07, 0x86, 0x5E, 0x3B, 0x84, 0x83, 0x82, 0x09, 0x0C, 0x8C, 0x45, 0x92, 0x9D, 0x72, 0x2D, 0x3A, 0x33, 0x4A, 0x47, 0x42, 0x0B, 0x8A, 0x0A, 0x95, 0x92, 0x79, 0x28, 0x3F, 0x3B, 0x96, 0x37, 0x86, 0x69, 0x66, 0x57, 0x6D, 0x30, 0x59, 0x54, 0x46, 0x45, 0x82, 0x79,0x7F, 0x2A, 0x59, 0x5C, 0x58, 0x4F, 0x0A, 0x85, 0x0E, 0x16, 0x1D, 0x15, 0x8C, 0x71, 0x6A, 0x37, 0x89, 0x96, 0x31, 0x98, 0x2B, 0x3C, 0x41, 0x4E, 0x4B, 0x04, 0x87, 0x08, 0x93, 0x94, 0x7F, 0x24, 0x33, 0x3A, 0x27, 0x76, 0x71, 0x68, 0x5F, 0x5C, 0x51, 0x42, 0x1D, 0x6A, 0x89, 0x86, 0x87, 0x08, 0x85, 0x0A, 0x01, 0x1E, 0x05, 0x74, 0xC6, 0xB1, 0xA8, 0x0F, 0x84, 0xC1, 0x56, 0x29, 0x6F, 0x9C, 0x03, 0x08, 0x4E, 0x35, 0x2A, 0x71, 0xA2, 0x53, 0x92, 0x89, 0x78, 0x87, 0x60, 0x6B, 0x3C, 0x5F, 0x42, 0x95, 0x68, 0xB3, 0x6A, 0x7D, 0x52, 0x09, 0x8C, 0x51, 0x3E, 0x8A, 0x89, 0x88, 0x03, 0x0A, 0x8F, 0x42, 0x91, 0x98, 0x77, 0x2C, 0x3B, 0x30, 0x4D, 0x44, 0x41, 0x0E, 0x83, 0x04, 0x97, 0x90, 0x7B, 0x2E, 0x33, 0x38, 0x93, 0x34, 0x83, 0x6C, 0x67, 0x5A, 0x63, 0x3E, 0x55, 0x5C, 0x4B, 0x44, 0x83, 0x78, 0x71, 0x2E, 0x57, 0x58, 0x59, 0x4C, 0x0D, 0x82, 0x0C, 0x1A, 0x1F, 0x1E, 0x85, 0x74, 0x6F, 0x3C, 0x81, 0x94, 0x33, 0x9A, 0x21, 0x3A, 0x45, 0x48, 0x4F, 0x00, 0x89, 0x08, 0x9E, 0x91, 0x7A, 0x2B, 0x34, 0x3D, 0x92, 0x31, 0x82, 0x6F, 0x6A, 0x51, 0x6C, 0x37, 0x5A, 0x56, 0x41, 0x48, 0x85, 0x7A, 0x73, 0x22, 0x5B, 0x5C, 0x5D, 0x4A, 0x0B, 0x84, 0x0A, 0x12, 0x19, 0x18, 0x81, 0x7E, 0x61, 0x38, 0x8F, 0x92, 0x35, 0x9C, 0x23, 0x3E, 0x40, 0x4D, 0x48, 0x07, 0x80, 0x0C, 0x9B, 0x96, 0x7D, 0x22, 0x35, 0x3C, 0x25, 0x74, 0x73, 0x6E, 0x59, 0x5E, 0x55, 0x46, 0x1F, 0x68, 0x87, 0x84, 0x85, 0x0A, 0x87, 0x08, 0x0E, 0x1B, 0x14, 0x71, 0xC2, 0xB5, 0xA2, 0x03, 0x8A, 0xC5, 0x5E, 0x21, 0x67, 0x98, 0x07, 0x0C, 0x47, 0x32, 0x23, 0x76, 0xA5, 0x56, 0x93, 0x88, 0x79, 0x86, 0x67, 0x6C, 0x35, 0x58, 0x4B, 0x92, 0x6F, 0xB6, 0x6B, 0x7A, 0x55, 0x02, 0x81, 0x54, 0x39, 0x82, 0x83, 0x84, 0x01, 0x08, 0x8D, 0x40, 0x93, 0x9A, 0x7B, 0x28, 0x3F, 0x32, 0x4F, 0x46, 0x43, 0x0C, 0x81, 0x02, 0x9F, 0x92, 0x74, 0x2F, 0x32, 0x3B, 0x90, 0x3B, 0x84, 0x6B, 0x6E, 0x53, 0x6A, 0x39, 0x5F, 0x52, 0x47, 0x40, 0x87, 0x76, 0x7F, 0x2A, 0x51, 0x5A, 0x5B, 0x48, 0x09, 0x86, 0x08, 0x14, 0x1D, 0x1C, 0x83, 0x7D, 0x60, 0x3B, 0x88, 0x95, 0x30, 0x9B, 0x24, 0x3F, 0x42, 0x4B, 0x4E, 0x01, 0x88, 0x04, 0x9D, 0x9E, 0x77, 0x2A,0x37, 0x3E, 0x91, 0x3A, 0x85, 0x6A, 0x61, 0x56, 0x6F, 0x3A, 0x5E, 0x55, 0x42, 0x49, 0x84, 0x7B, 0x72, 0x23, 0x5A, 0x5F, 0x5E, 0x4D, 0x0C, 0x83, 0x0D, 0x1B, 0x1E, 0x1D, 0x82, 0x7C, 0x63, 0x3A, 0x8E, 0x93, 0x32, 0x9E, 0x21, 0x38, 0x47, 0x4A, 0x4F, 0x00, 0x8B, 0x0C, 0x98, 0x95, 0x7E, 0x29, 0x30, 0x39, 0x96, 0x33, 0x80, 0x6D, 0x68, 0x5D, 0x64, 0x3F, 0x57, 0x54, 0x43, 0x4A, 0x87, 0x76, 0x7B, 0x24, 0x5D, 0x52, 0x53, 0x4E, 0x0F, 0x84, 0x0E, 0x16, 0x1F, 0x1E, 0x87, 0x77, 0x6C, 0x35, 0x8A, 0x95, 0x34, 0x9F, 0x20, 0x3B, 0x46, 0x49, 0x4C, 0x03, 0x8A, 0x0A, 0x93, 0x94, 0x7F, 0x2C, 0x31, 0x38, 0x95, 0x36, 0x81, 0x6E, 0x69, 0x5C, 0x67, 0x3C, 0x5B, 0x56, 0x45, 0x4C, 0x81, 0x7E, 0x77, 0x28, 0x5F, 0x5E, 0x5D, 0x4A, 0x0B, 0x86, 0x0A, 0x12, 0x1B, 0x1A, 0x81, 0x7F, 0x64, 0x39, 0x8C, 0x93, 0x36, 0x9D, 0x22, 0x3D, 0x40, 0x4D, 0x48, 0x07, 0x80, 0x0C, 0x9F, 0x92, 0x77, 0x2A, 0x35, 0x3C, 0x93, 0x34, 0x85, 0x68, 0x6D, 0x52, 0x6B, 0x36, 0x5C, 0x55, 0x44, 0x4D, 0x82, 0x7D, 0x74, 0x29, 0x50, 0x5B, 0x5A, 0x49, 0x08, 0x87, 0x09, 0x11, 0x1C, 0x1B, 0x80, 0x7A, 0x65, 0x3C, 0x89, 0x96, 0x31, 0x98, 0x23, 0x3C, 0x43, 0x4E, 0x4B, 0x04, 0x89, 0x08, 0x95, 0x96, 0x7D, 0x2E, 0x33, 0x3A, 0x95, 0x3A, 0x87, 0x6A, 0x63, 0x58, 0x6E, 0x39, 0x5D, 0x54, 0x43, 0x4A, 0x85, 0x7A, 0x73, 0x26, 0x59, 0x58, 0x59, 0x4C, 0x0D, 0x82, 0x0C, 0x1A, 0x1F, 0x1E, 0x85, 0x74, 0x6B, 0x36, 0x8B, 0x94, 0x37, 0x9C, 0x26, 0x39, 0x44, 0x4B, 0x4E, 0x01, 0x88, 0x04, 0x91, 0x98, 0x73, 0x2C, 0x3B, 0x34, 0x97, 0x32, 0x83, 0x6C, 0x67, 0x5E, 0x61, 0x3E, 0x56, 0x55, 0x46, 0x4F, 0x86, 0x79, 0x70, 0x2F, 0x56, 0x51, 0x52, 0x4F, 0x0E, 0x85, 0x0F, 0x17, 0x1A, 0x19, 0x82, 0x7C, 0x67, 0x3E, 0x88, 0x95, 0x35, 0x9E, 0x24, 0x3B, 0x48, 0x4F, 0x4A, 0x05, 0x8C, 0x0A, 0x97, 0x90, 0x7B, 0x28, 0x3F, 0x36, 0x9B, 0x34, 0x87, 0x68, 0x6F, 0x54, 0x68, 0x3B, 0x5F, 0x52, 0x49, 0x4E, 0x83, 0x7C, 0x75, 0x2A, 0x53, 0x5C, 0x5D, 0x4A, 0x0B, 0x84, 0x0A, 0x12, 0x1D, 0x1C, 0x83, 0x7D, 0x60, 0x3F, 0x8C, 0x91, 0x38, 0x9B, 0x27, 0x3A, 0x45, 0x48, 0x4F, 0x00, 0x8B, 0x0C, 0x92, 0x9D, 0x72, 0x2D, 0x32, 0x3B,0x94, 0x37, 0x82, 0x6B, 0x6E, 0x57, 0x62, 0x3D, 0x5A, 0x55, 0x46, 0x4B, 0x86, 0x79, 0x70, 0x2B, 0x52, 0x5D, 0x5C, 0x4B, 0x0A, 0x85, 0x0B, 0x13, 0x1A, 0x18, 0x83, 0x7D, 0x62, 0x37, 0x8A, 0x95, 0x34, 0x9F, 0x21, 0x3A, 0x47, 0x4A, 0x4F, 0x02, 0x89, 0x04, 0x96, 0x9F, 0x74, 0x2F, 0x30, 0x39, 0x96, 0x33, 0x84, 0x69, 0x6C, 0x51, 0x6A, 0x35, 0x5C, 0x55, 0x44, 0x4D, 0x82, 0x7D, 0x74, 0x2D, 0x54, 0x59, 0x5C, 0x4B, 0x0A, 0x85, 0x0B, 0x11, 0x1E, 0x1D, 0x82, 0x7C, 0x63, 0x38, 0x8B, 0x94, 0x37, 0x9C, 0x26, 0x39, 0x44, 0x4B, 0x4E, 0x03, 0x8A, 0x08, 0x91, 0x98, 0x73, 0x2C, 0x3B, 0x34, 0x97, 0x32, 0x83, 0x6C, 0x67, 0x5E, 0x61, 0x3E, 0x56, 0x55, 0x46, 0x4F, 0x86, 0x79, 0x70, 0x2F, 0x56, 0x51, 0x52, 0x4F, 0x0E, 0x85, 0x0F, 0x15, 0x1C, 0x1B, 0x80, 0x7A, 0x65, 0x3A, 0x89, 0x96, 0x31, 0x98, 0x23, 0x3C, 0x43, 0x4E, 0x4B, 0x04, 0x89, 0x08, 0x95, 0x96, 0x7D, 0x2E, 0x33, 0x3A, 0x95, 0x3A, 0x87, 0x6A, 0x61, 0x56, 0x6F, 0x3A, 0x5E, 0x55, 0x42, 0x49, 0x84, 0x7B, 0x72, 0x27, 0x5A, 0x5F, 0x5E, 0x4D, 0x0C, 0x83, 0x0D, 0x19, 0x1E, 0x1D, 0x82, 0x7C, 0x67, 0x3C, 0x88, 0x95, 0x33, 0x9E, 0x22, 0x3D, 0x40, 0x4D, 0x48, 0x07, 0x80, 0x0C, 0x98, 0x95, 0x7E, 0x29, 0x30, 0x39, 0x96, 0x33, 0x84, 0x69, 0x6C, 0x51, 0x6A, 0x35, 0x5C, 0x55, 0x44, 0x4D, 0x82, 0x7D, 0x74, 0x29, 0x50, 0x5B, 0x5A, 0x49, 0x08, 0x87, 0x09, 0x0F, 0x1C, 0x1B, 0x80, 0x7A, 0x65, 0x3A, 0x89, 0x96, 0x31, 0x98, 0x23, 0x3C, 0x43, 0x4E, 0x4B, 0x04, 0x89, 0x08, 0x91, 0x98, 0x73, 0x2C, 0x3B, 0x34, 0x97, 0x32, 0x83, 0x6C, 0x67, 0x5E, 0x62, 0x3D, 0x5A, 0x55, 0x46, 0x4B, 0x86, 0x79, 0x70, 0x2B, 0x52, 0x5D, 0x5C, 0x4B, 0x0A, 0x85, 0x0B, 0x13, 0x1A, 0x18, 0x83, 0x7D, 0x62, 0x37, 0x8A, 0x95, 0x34, 0x9F, 0x21, 0x3A, 0x47, 0x4A, 0x4F, 0x02, 0x89, 0x04, 0x9D, 0x9E, 0x77, 0x2A, 0x37, 0x3E, 0x91, 0x3A, 0x85, 0x6A, 0x61, 0x56, 0x6E, 0x39, 0x5D, 0x54, 0x43, 0x4A, 0x85, 0x7A, 0x73, 0x26, 0x59, 0x58, 0x59, 0x4C, 0x0D, 0x82, 0x0C, 0x1A, 0x1F, 0x1E, 0x85, 0x74, 0x6B, 0x36, 0x8B, 0x94, 0x37, 0x9C, 0x26, 0x39, 0x44, 0x4B, 0x4E, 0x03, 0x8A, 0x08, 0x95, 0x96, 0x7D, 0x2E, 0x33, 0x3A, 0x95, 0x3A, 0x87, 0x6A, 0x63, 0x58, 0x6E, 0x39, 0x5D, 0x54, 0x43, 0x4A, 0x87, 0x76, 0x7B, 0x24, 0x5D, 0x52, 0x53, 0x4E, 0x0F, 0x84, 0x0E, 0x16, 0x1F, 0x1E, 0x87, 0x77, 0x6C, 0x35, 0x8A, 0x95, 0x34, 0x9F, 0x21, 0x3A, 0x47, 0x4A, 0x4F, 0x00, 0x8B, 0x0C, 0x98, 0x95, 0x7E, 0x29, 0x30, 0x39, 0x96, 0x33, 0x84, 0x69, 0x6C, 0x51, 0x6A, 0x35, 0x5C, 0x55, 0x44, 0x4D, 0x82, 0x7D, 0x74, 0x2D, 0x54, 0x59, 0x5C, 0x4B, 0x0A, 0x85, 0x0B, 0x11, 0x1E, 0x1D, 0x82, 0x7C, 0x67, 0x3C, 0x88, 0x95, 0x33, 0x9E, 0x22, 0x3D, 0x40, 0x4D, 0x48, 0x07, 0x80, 0x0C, 0x91, 0x98, 0x73, 0x2C, 0x3B, 0x34, 0x97, 0x32, 0x83, 0x6C, 0x67, 0x5E, 0x62, 0x3D, 0x5A, 0x55, 0x46, 0x4B, 0x86, 0x79, 0x70, 0x2F, 0x56, 0x51, 0x52, 0x4F, 0x0E, 0x85, 0x0F, 0x17, 0x1A, 0x19, 0x82, 0x7C, 0x67, 0x3C, 0x88, 0x95, 0x33, 0x9E, 0x22, 0x3D, 0x40, 0x4D, 0x48, 0x07, 0x80, 0x0C, 0x98, 0x95, 0x7E, 0x29, 0x30, 0x39, 0x96, 0x33, 0x84, 0x69, 0x6C, 0x51, 0x6A, 0x35, 0x5C, 0x55, 0x44, 0x4D, 0x82, 0x7D, 0x74, 0x2D, 0x54, 0x59, 0x5C, 0x4B, 0x0A, 0x85, 0x0B, 0x13, 0x1A, 0x18, 0x83, 0x7D, 0x62, 0x37, 0x8A, 0x95, 0x34, 0x9F, 0x21, 0x3A, 0x47, 0x4A, 0x4F, 0x02, 0x89, 0x04, 0x9D, 0x9E, 0x77, 0x2A, 0x37, 0x3E, 0x91, 0x3A, 0x85, 0x6A, 0x61, 0x56, 0x6E, 0x39, 0x5D, 0x54, 0x43, 0x4A, 0x85, 0x7A, 0x73, 0x26, 0x59, 0x58, 0x59, 0x4C, 0x0D, 0x82, 0x0C, 0x1A, 0x1F, 0x1E, 0x85, 0x74, 0x6B, 0x36, 0x8B, 0x94, 0x37, 0x9C, 0x26, 0x39, 0x44, 0x4B, 0x4E, 0x03, 0x8A, 0x08, 0x95, 0x96, 0x7D, 0x2E, 0x33, 0x3A
]
def xcrc32(data, initial_crc):
    crc = initial_crc
    for byte in data:
        table_index = (byte ^ (crc >> 24)) & 0xFF
        crc = crc32_table[table_index] ^ (crc << 8)
        crc &= 0xFF  # 确保CRC32结果在32位范围内
    return crc

def find_two_byte_combinations(target):
    combinations = []

    for t in target:
        found = False
        for i in range(0, 256):
            for j in range(0, 256):
                candidate = (i << 8) | j
                if binascii.crc32(candidate.to_bytes(2, 'big')) & 0xFFFFFFFF == t:
                    combinations.append(candidate)
                    found = True
                    break
            if found:
                break
    
    return combinations

target = [
    0xD7, 0x57, 0x5F, 0x4D, 0x89, 0x6C, 0xDD, 0x44, 0x86, 0x45, 0x32, 0x25,
    0x6A, 0x33, 0x36, 0x36, 0x86, 0x45, 0x32, 0x25, 0x60, 0xFD, 0x83, 0x88,
    0x89, 0xDB, 0x85
]

# 查找每个target对应的两字节数字组合
combinations = find_two_byte_combinations(target)
for idx, comb in enumerate(combinations):
    print(f"Target[{idx}]: {target[idx]:04X} corresponds to {comb:04X}")
